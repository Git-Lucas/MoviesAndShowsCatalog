Project Challenge: Microservices-based Movie Catalog Backend with Swagger Documentation


Objective:
Design and implement a microservices-based movie catalog backend that provides an API for managing movie data. Each microservice should have its own responsibility, and the API documentation should be presented using Swagger for a clean and presentable interface.


Microservices:
- User Management Microservice:
Responsible for user registration, authentication, and authorization.
Include endpoints for user registration, login, and token-based authentication.

- Movie Management Microservice:
Implement CRUD operations for managing movie data (title, genre, release date, etc.).
Use proper RESTful API endpoints for each operation.
Integrate with a database for storing movie data.

- Rating and Review Microservice:
Manages user ratings and reviews for movies.
Calculate and store average ratings for each movie.

- Notification Microservice (Background Service):
Implement a background service to send notifications for new movie releases or updates asynchronously.
Integrate with a message broker for communication.


Communication Between Microservices:
Use synchronous communication (HTTP/REST) between User Management, Movie Management, and Rating/Review Microservices.
Implement asynchronous communication using a message broker (e.g., RabbitMQ or Kafka) between Movie Management Microservice and Notification Microservice.


Guidelines:
Each microservice should be containerized using Docker.
Implement proper error handling and response codes in each microservice.
Secure microservices with token-based authentication.


Bonus (Optional):
Implement pagination for listing movies.
Implement role-based access control for certain API operations (e.g., only administrators can delete movies).