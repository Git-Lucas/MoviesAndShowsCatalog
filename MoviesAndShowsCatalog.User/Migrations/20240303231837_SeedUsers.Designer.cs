// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesAndShowsCatalog.User.Infrastructure.Data;

#nullable disable

namespace MoviesAndShowsCatalog.User.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240303231837_SeedUsers")]
    partial class SeedUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MoviesAndShowsCatalog.User.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MoviesAndShowsCatalog.User.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GenrePreferences")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            GenrePreferences = "Action,ScienceFiction",
                            Password = "000",
                            Role = 0,
                            Username = "lucas"
                        },
                        new
                        {
                            Id = 1,
                            GenrePreferences = "",
                            Password = "111",
                            Role = 1,
                            Username = "administrador"
                        },
                        new
                        {
                            Id = 3,
                            GenrePreferences = "Comedy,Adventure",
                            Password = "222",
                            Role = 0,
                            Username = "joão"
                        },
                        new
                        {
                            Id = 4,
                            GenrePreferences = "Action,Fantasy,Romance",
                            Password = "333",
                            Role = 0,
                            Username = "maria"
                        },
                        new
                        {
                            Id = 5,
                            GenrePreferences = "Animation,Documentary",
                            Password = "444",
                            Role = 0,
                            Username = "carlos"
                        });
                });

            modelBuilder.Entity("MoviesAndShowsCatalog.User.Domain.Entities.Notification", b =>
                {
                    b.HasOne("MoviesAndShowsCatalog.User.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
